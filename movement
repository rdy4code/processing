// Ready Project 
// https://www.openprocessing.org/sketch/723983

//Global scope
int x = 32;
int y = 0;

int horizontal = 0;
int vertical = 0;

int shipWidth = 32;
int shipHeight = 32;

//int wallThickness = 8;

PImage img;

void setup(){
	background(0);
	size(800, 600);
	frameRate(60);
	
	img = loadImage("https://www.openprocessing.org/sketch/723983/files/137px-Spacecraft.png", "png");
}

void spaceship(){
  fill(255, 0, 0);
	rect(x, y, shipWidth, shipHeight);
	//image(img, x, y, shipWidth, shipHeight);
}

void keyTyped(){
		// Horizontal SPACESHIP	movement logic
		if(key == 'd'){
			horizontal = +1;
		}
		if(key == 'a'){
			horizontal = -1;
		}
		// Vertical SPACESHIP movement logic
		if(key =='s'){
			vertical = +1;
		}
		if(key == 'w'){
			vertical = -1;
		}
}

void keyReleased (){
	if(key == 'd'){
		horizontal = 0;
	}
	if(key == 'a'){
		horizontal = 0;
	}

	// Vertical SPACESHIP movement logic
	if(key =='s'){
		vertical = 0;
	}
	if(key == 'w'){
		vertical = 0;
	}
}


bool isPointInsideBox(int x, int y, int boxX, int boxY, int boxWidth, int boxHeight){
  bool isXInside = x >= boxX && x <= boxX + boxWidth;
  bool isYInside = y >= boxY && x <= boxY + boxHeight;

  return isXInside && isYInside;
}

bool isBoxInsideBox(int x, int y, int boxX, int boxY, int boxWidth, int boxHeight){
	bool topLeftCornerCollision = isPointInsideBox(x + horizontal, y + vertical, boxX, boxY, boxWidth, boxHeight);
  bool topRightCornerCollision = isPointInsideBox(x + horizontal + shipWidth, y + vertical, boxX, boxY, boxWidth, boxHeight);
  bool bottomLeftCornerCollision = isPointInsideBox(x + horizontal, y + vertical + shipHeight, boxX, boxY, boxWidth, boxHeight); 
  bool bottomRightCornerCollision = isPointInsideBox(x + horizontal + shipWidth, y + vertical + shipHeight, boxX, boxY, boxWidth, boxHeight);

  return topRightCornerCollision || topLeftCornerCollision || bottomRightCornerCollision || bottomLeftCornerCollision;
}

void draw(){

  //Check for collision
  //bool topLeftCornerCollision = isPointInsideBox(x + horizontal, y + vertical, 120, 120, 32,32);
  // change coordinates 
  bool topLeftCornerCollision = isPointInsideBox(x + horizontal, y + vertical, 120, 120, 32,32);
  bool topRightCornerCollision = isPointInsideBox(x + horizontal + shipWidth, y + vertical, 120, 120, 32,32);
  bool bottomLeftCornerCollision = isPointInsideBox(x + horizontal, y + vertical + shipHeight, 120, 120, 32,32); 
  bool bottomRightCornerCollision = isPointInsideBox(x + horizontal + shipWidth, y + vertical + shipHeight, 120, 120, 32,32);

  // if (x + shipWidth + horizontal < 200 && x + horizontal > wallThickness) {

    if (!topLeftCornerCollision &&
		!topRightCornerCollision &&
		!bottomRightCornerCollision && !bottomLeftCornerCollision ){
   	  x = x + horizontal;
      y = y + vertical;
     }

  // }
  // if (y + shipHeight + vertical < 200){
	// }

	clear();
	spaceship();

  fill(255, 255, 255);
  rect(120, 120, 32, 32);
  // rect(200, 0, wallThickness, 1000);
  // rect(0, 200, 1000, wallThickness);
	// rect(0,0, wallThickness, 1000);	
}